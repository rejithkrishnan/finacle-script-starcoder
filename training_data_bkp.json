[
    {
        "prompt": "Create a simple Finacle script that prints 'Hello World'.",
        "script": "<--start\n# This is a comment\nprint(\"Hello World\")\nend-->"
    },
    {
        "prompt": "Assign the number 100 to scratchpad variable sv_a and print it.",
        "script": "<--start\nsv_a = 100\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Assign the string 'Finacle' to a local variable lv_b and print it.",
        "script": "<--start\nlv_b = \"Finacle\"\nprint(lv_b)\nend-->"
    },
    {
        "prompt": "Add the numbers 55 and 45 and store the result in sv_c.",
        "script": "<--start\nsv_a = 55\nsv_b = 45\nsv_c = sv_a + sv_b\nprint(sv_c)\nend-->"
    },
    {
        "prompt": "Subtract 25 from 75 and print the output.",
        "script": "<--start\nsv_x = 75\nsv_y = 25\nsv_z = sv_x - sv_y\nprint(sv_z)\nend-->"
    },
    {
        "prompt": "Multiply 12 by 10 and display the result.",
        "script": "<--start\nsv_m = 12\nsv_n = 10\nsv_result = sv_m * sv_n\nprint(sv_result)\nend-->"
    },
    {
        "prompt": "Divide 100 by 4 and show the result.",
        "script": "<--start\nsv_p = 100\nsv_q = 4\nsv_r = sv_p / sv_q\nprint(sv_r)\nend-->"
    },
    {
        "prompt": "Concatenate the strings 'Core' and 'Banking' with a space in between.",
        "script": "<--start\nsv_str1 = \"Core\"\nsv_str2 = \"Banking\"\nsv_full = sv_str1 + \" \" + sv_str2\nprint(sv_full)\nend-->"
    },
    {
        "prompt": "Check if sv_a is equal to 50. If so, print 'Equal'.",
        "script": "<--start\nsv_a = 50\nif (sv_a == 50) then\n  print(\"Equal\")\nendif\nend-->"
    },
    {
        "prompt": "If variable sv_b is not equal to 'TEST', print 'Not Equal'.",
        "script": "<--start\nsv_b = \"PROD\"\nif (sv_b != \"TEST\") then\n  print(\"Not Equal\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_c is greater than 100, print 'Greater', otherwise print 'Not Greater'.",
        "script": "<--start\nsv_c = 101\nif (sv_c > 100) then\n  print(\"Greater\")\nelse\n  print(\"Not Greater\")\nendif\nend-->"
    },
    {
        "prompt": "Check if sv_d is less than or equal to 5. If it is, print 'OK'.",
        "script": "<--start\nsv_d = 5\nif (sv_d <= 5) then\n  print(\"OK\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_a is 'Y' AND sv_b is 'ACTIVE', print 'Proceed'.",
        "script": "<--start\nsv_a = \"Y\"\nsv_b = \"ACTIVE\"\nif ((sv_a == \"Y\") AND (sv_b == \"ACTIVE\")) then\n  print(\"Proceed\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_status is 'CLOSED' OR sv_status is 'LOCKED', print 'Action Required'.",
        "script": "<--start\nsv_status = \"CLOSED\"\nif ((sv_status == \"CLOSED\") OR (sv_status == \"LOCKED\")) then\n  print(\"Action Required\")\nendif\nend-->"
    },
    {
        "prompt": "Use a while loop to print numbers from 1 to 3.",
        "script": "<--start\nlv_a = 1\nwhile (lv_a <= 3)\ndo\n  print(lv_a)\n  lv_a = lv_a + 1\nendwhile\nend-->"
    },
    {
        "prompt": "Use the unary minus operator to make the number 10 negative.",
        "script": "<--start\nsv_a = 10\nsv_b = -sv_a\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Jump to a label named 'skip_section' using GOTO.",
        "script": "<--start\nprint(\"Part 1\")\nGOTO skip_section\nprint(\"This should not be printed\")\nskip_section:\nprint(\"Part 2\")\nend-->"
    },
    {
        "prompt": "Call a subroutine named 'print_routine' using GOSUB and then exit.",
        "script": "<--start\nGOSUB print_routine\nEXITSCRIPT\nprint_routine:\n  print(\"Inside subroutine\")\n  RETURN\nend-->"
    },
    {
        "prompt": "Call another script named 'child_script.scr'.",
        "script": "<--start\nprint(\"Calling another script...\")\nCALL(\"child_script.scr\")\nprint(\"Returned from child script.\")\nend-->"
    },
    {
        "prompt": "Start execution of a script named 'new_process.scr' and do not return.",
        "script": "<--start\nprint(\"Starting new process...\")\nSTART(\"new_process.scr\")\n# This line will not be reached\nend-->"
    },
    {
        "prompt": "Extract 'abc' from the string 'xyzabcdef' using MID$.",
        "script": "<--start\nsv_s = \"xyzabcdef\"\nsv_sub = Mid$(sv_s, 3, 3)\nprint(sv_sub)\nend-->"
    },
    {
        "prompt": "Get the first 4 characters of the string 'FinacleCore'.",
        "script": "<--start\nsv_s = \"FinacleCore\"\nsv_left = Left$(sv_s, 4)\nprint(sv_left)\nend-->"
    },
    {
        "prompt": "Get the last 4 characters of 'FinacleCore'.",
        "script": "<--start\nsv_s = \"FinacleCore\"\nsv_right = Right$(sv_s, 4)\nprint(sv_right)\nend-->"
    },
    {
        "prompt": "Convert the string '123.45' to a double and print it.",
        "script": "<--start\nsv_a = CDOUBLE(\"123.45\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Convert the string '987' to an integer.",
        "script": "<--start\nsv_a = CINT(\"987\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Convert the string 'HeLLo' to all lowercase.",
        "script": "<--start\nsv_a = TOLOWER(\"HeLLo\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Convert 'world' to all uppercase.",
        "script": "<--start\nsv_a = TOUPPER(\"world\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Find the length of the string 'Extensibility'.",
        "script": "<--start\nsv_len = STRLEN(\"Extensibility\")\nprint(sv_len)\nend-->"
    },
    {
        "prompt": "Get the character at position 5 in the string 'Finacle Scripting'.",
        "script": "<--start\nsv_char = CHARAT(\"Finacle Scripting\", 5)\nprint(sv_char)\nend-->"
    },
    {
        "prompt": "Remove leading spaces from the string '  indented'.",
        "script": "<--start\nsv_a = \"  indented\"\nsv_b = LTRIM(sv_a)\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Remove trailing spaces from 'padded   '.",
        "script": "<--start\nsv_a = \"padded   \"\nsv_b = RTRIM(sv_a)\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Remove both leading and trailing asterisks from '***TRIMMED***'.",
        "script": "<--start\nsv_a = \"***TRIMMED***\"\nsv_b = TRIM(sv_a, \"*\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Left-pad the string 'ID' with zeros to a total length of 8.",
        "script": "<--start\nsv_a = \"ID\"\nsv_b = LPAD(sv_a, 8, \"0\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Right-pad the string 'User' with '#' to a total length of 10.",
        "script": "<--start\nsv_a = \"User\"\nsv_b = RPAD(sv_a, 10, \"#\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Check if a repository named 'GLOBAL' exists.",
        "script": "<--start\nsv_exists = REPEXISTS(\"GLOBAL\")\nif (sv_exists == 1) then\n  print(\"Repository exists.\")\nelse\n  print(\"Repository does not exist.\")\nendif\nend-->"
    },
    {
        "prompt": "Check if a class named 'INPUT' exists in the 'BANCS' repository.",
        "script": "<--start\nsv_exists = CLASSEXISTS(\"BANCS\", \"INPUT\")\nif (sv_exists == 1) then\n  print(\"Class exists.\")\nendif\nend-->"
    },
    {
        "prompt": "Check if the field 'userId' exists in 'BANCS.STDIN'.",
        "script": "<--start\nsv_exists = FIELDEXISTS(BANCS.STDIN.userId)\nif (sv_exists == 1) then\n  print(\"Field exists.\")\nendif\nend-->"
    },
    {
        "prompt": "Create a temporary repository named 'MY_TEMP_REP'.",
        "script": "<--start\nCREATEREP(\"MY_TEMP_REP\")\nprint(\"Repository created.\")\nend-->"
    },
    {
        "prompt": "Create a STRING class named 'DATA' in the 'MY_TEMP_REP' repository.",
        "script": "<--start\n# Assumes MY_TEMP_REP exists\n# 5 is the type for STRING\nCREATECLASS(\"MY_TEMP_REP\", \"DATA\", 5)\nprint(\"Class created.\")\nend-->"
    },
    {
        "prompt": "Delete the temporary class 'DATA' from the 'MY_TEMP_REP' repository.",
        "script": "<--start\nDELETECLASS(\"MY_TEMP_REP\", \"DATA\")\nprint(\"Class deleted.\")\nend-->"
    },
    {
        "prompt": "Delete the temporary repository 'MY_TEMP_REP'.",
        "script": "<--start\nDELETEREP(\"MY_TEMP_REP\")\nprint(\"Repository deleted.\")\nend-->"
    },
    {
        "prompt": "Assign the value 'test_user' to the repository field BANCS.INPUT.user.",
        "script": "<--start\nBANCS.INPUT.user = \"test_user\"\nprint(BANCS.INPUT.user)\nend-->"
    },
    {
        "prompt": "Copy the value from repository field BANCS.STDIN.userId to sv_a.",
        "script": "<--start\n# This assumes the field has a value\nsv_a = BANCS.STDIN.userId\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Set the script return status to Failure.",
        "script": "<--start\nBANCS.OUTPUT.successOrFailure = \"F\"\nend-->"
    },
    {
        "prompt": "Set the script return status to Success.",
        "script": "<--start\nBANCS.OUTPUT.successOrFailure = \"S\"\nend-->"
    },
    {
        "prompt": "Turn on script tracing.",
        "script": "<--start\nTRACE ON\nprint(\"Tracing is now active.\")\nend-->"
    },
    {
        "prompt": "Turn off script tracing.",
        "script": "<--start\nTRACE OFF\nprint(\"Tracing is now inactive.\")\nend-->"
    },
    {
        "prompt": "Exit the current script immediately.",
        "script": "<--start\nprint(\"About to exit...\")\nEXITSCRIPT\nprint(\"This will not be printed.\")\nend-->"
    },
    {
        "prompt": "Call a user hook function named 'VALIDATE_USER'.",
        "script": "<--start\nsv_a = URHK_VALIDATE_USER(\"some_input_data\")\nif (sv_a == 0) then\n  print(\"User hook successful.\")\nelse\n  print(\"User hook failed.\")\nendif\nend-->"
    },
    {
        "prompt": "Call a user routine 'CalculateInterest' from the default library.",
        "script": "<--start\nsv_a = URTN_CalculateInterest(\"account_data\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Set a library name to 'CUSTOM.DLL' for user routines.",
        "script": "<--start\nLIBNAME \"CUSTOM.DLL\"\nsv_a = URTN_CustomRoutine(\"data\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Find the position of 'script' in 'Finacle scripting language'.",
        "script": "<--start\nsv_pos = GETPOSITION(\"Finacle scripting language\", \"script\")\nprint(sv_pos)\nend-->"
    },
    {
        "prompt": "Do a case-insensitive search for 'FINACLE' in 'Welcome to Finacle'.",
        "script": "<--start\nsv_pos = GETIPOSITION(\"Welcome to Finacle\", \"FINACLE\")\nprint(sv_pos)\nend-->"
    },
    {
        "prompt": "Compare the strings 'Hello' and 'hello' without case sensitivity.",
        "script": "<--start\nsv_result = STRICMP(\"Hello\", \"hello\")\nif (sv_result == 1) then\n  print(\"Strings are the same, ignoring case.\")\nendif\nend-->"
    },
    {
        "prompt": "Assign 12 to sv_a, 20 to sv_b. Check if sv_a is less than sv_b.",
        "script": "<--start\nsv_a = 12\nsv_b = 20\nif (sv_a < sv_b) then\n  print(\"sv_a is less than sv_b\")\nendif\nend-->"
    },
    {
        "prompt": "Check if sv_x is greater than or equal to 100.",
        "script": "<--start\nsv_x = 100\nif (sv_x >= 100) then\n  print(\"sv_x is 100 or more.\")\nendif\nend-->"
    },
    {
        "prompt": "Loop while a counter lv_i is less than 5, incrementing it each time.",
        "script": "<--start\nlv_i = 0\nwhile (lv_i < 5)\ndo\n  print(lv_i)\n  lv_i = lv_i + 1\nendwhile\nend-->"
    },
    {
        "prompt": "If BANCS.INPUT.acct_type is 'SBA' or 'CAA', print 'Operative Account'.",
        "script": "<--start\n# Assuming BANCS.INPUT.acct_type is set\nif ((BANCS.INPUT.acct_type == \"SBA\") OR (BANCS.INPUT.acct_type == \"CAA\")) then\n  print(\"Operative Account\")\nendif\nend-->"
    },
    {
        "prompt": "Create an integer class 'COUNTERS' in repository 'SESSION'.",
        "script": "<--start\n# 1 is the type for INTEGER\nCREATEREP(\"SESSION\")\nCREATECLASS(\"SESSION\", \"COUNTERS\", 1)\nSESSION.COUNTERS.login_attempts = 0\nprint(SESSION.COUNTERS.login_attempts)\nend-->"
    },
    {
        "prompt": "Create a double class 'BALANCES' in repository 'SESSION'.",
        "script": "<--start\n# 2 is the type for DOUBLE\nCREATEREP(\"SESSION\")\nCREATECLASS(\"SESSION\", \"BALANCES\", 2)\nSESSION.BALANCES.min_bal = 100.50\nprint(SESSION.BALANCES.min_bal)\nend-->"
    },
    {
        "prompt": "Find the difference between 500 and 125.",
        "script": "<--start\nsv_a = 500\nsv_b = 125\nsv_diff = sv_a - sv_b\nprint(sv_diff)\nend-->"
    },
    {
        "prompt": "Calculate 7 times 8.",
        "script": "<--start\nsv_a = 7\nsv_b = 8\nsv_prod = sv_a * sv_b\nprint(sv_prod)\nend-->"
    },
    {
        "prompt": "Divide 99 by 3.",
        "script": "<--start\nsv_a = 99\nsv_b = 3\nsv_quotient = sv_a / sv_b\nprint(sv_quotient)\nend-->"
    },
    {
        "prompt": "Add 'Mr. ' to the name 'Stark'.",
        "script": "<--start\nsv_title = \"Mr. \"\nsv_name = \"Stark\"\nsv_full_name = sv_title + sv_name\nprint(sv_full_name)\nend-->"
    },
    {
        "prompt": "If a local variable lv_flag is 0, print 'Flag is off'.",
        "script": "<--start\nlv_flag = 0\nif (lv_flag == 0) then\n  print(\"Flag is off\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_country is not 'IN', print 'International'.",
        "script": "<--start\nsv_country = \"US\"\nif (sv_country != \"IN\") then\n  print(\"International\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_age is greater than 60, print 'Senior'. Else, print 'Not senior'.",
        "script": "<--start\nsv_age = 65\nif (sv_age > 60) then\n  print(\"Senior\")\nelse\n  print(\"Not senior\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_score is less than 50, print 'Fail'.",
        "script": "<--start\nsv_score = 49\nif (sv_score < 50) then\n  print(\"Fail\")\nendif\nend-->"
    },
    {
        "prompt": "If product code is 'A' and region is 'North', print 'Category A-North'.",
        "script": "<--start\nsv_prod = \"A\"\nsv_region = \"North\"\nif ((sv_prod == \"A\") AND (sv_region == \"North\")) then\n  print(\"Category A-North\")\nendif\nend-->"
    },
    {
        "prompt": "If sv_env is 'UAT' or 'SIT', print 'Test Environment'.",
        "script": "<--start\nsv_env = \"UAT\"\nif ((sv_env == \"UAT\") OR (sv_env == \"SIT\")) then\n  print(\"Test Environment\")\nendif\nend-->"
    },
    {
        "prompt": "Use a while loop to print even numbers from 2 to 10.",
        "script": "<--start\nlv_a = 2\nwhile (lv_a <= 10)\ndo\n  print(lv_a)\n  lv_a = lv_a + 2\nendwhile\nend-->"
    },
    {
        "prompt": "Make sv_b the negative of sv_a, where sv_a is -5.",
        "script": "<--start\nsv_a = -5\nsv_b = -sv_a\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Extract 'Script' from 'Finacle-Script-Tool' using MID$.",
        "script": "<--start\nsv_s = \"Finacle-Script-Tool\"\nsv_sub = Mid$(sv_s, 8, 6)\nprint(sv_sub)\nend-->"
    },
    {
        "prompt": "Get the first 7 characters of 'Welcome'.",
        "script": "<--start\nsv_s = \"Welcome\"\nsv_left = Left$(sv_s, 7)\nprint(sv_left)\nend-->"
    },
    {
        "prompt": "Get the last 3 characters of 'Automation'.",
        "script": "<--start\nsv_s = \"Automation\"\nsv_right = Right$(sv_s, 3)\nprint(sv_right)\nend-->"
    },
    {
        "prompt": "Convert the string '99.99' to a double data type.",
        "script": "<--start\nsv_a = CDOUBLE(\"99.99\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Convert '42' from a string to an integer.",
        "script": "<--start\nsv_a = CINT(\"42\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Convert 'FINACLE' to lowercase.",
        "script": "<--start\nsv_a = TOLOWER(\"FINACLE\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Convert 'custom' to uppercase.",
        "script": "<--start\nsv_a = TOUPPER(\"custom\")\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "What is the length of the string 'Repository'?",
        "script": "<--start\nsv_len = STRLEN(\"Repository\")\nprint(sv_len)\nend-->"
    },
    {
        "prompt": "What is the character at position 0 of 'Script'?",
        "script": "<--start\nsv_char = CHARAT(\"Script\", 0)\nprint(sv_char)\nend-->"
    },
    {
        "prompt": "Trim leading hyphens from '---data'.",
        "script": "<--start\nsv_a = \"---data\"\nsv_b = LTRIM(sv_a, \"-\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Trim trailing slashes from 'path//'.",
        "script": "<--start\nsv_a = \"path//\"\nsv_b = RTRIM(sv_a, \"/\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Remove leading and trailing spaces from '  padded string  '.",
        "script": "<--start\nsv_a = \"  padded string  \"\nsv_b = TRIM(sv_a)\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Left-pad 'Go' with '>' to a length of 5.",
        "script": "<--start\nsv_a = \"Go\"\nsv_b = LPAD(sv_a, 5, \">\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Right-pad 'End' with '<' to a length of 6.",
        "script": "<--start\nsv_a = \"End\"\nsv_b = RPAD(sv_a, 6, \"<\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "If repository 'USER_REP' does not exist, create it.",
        "script": "<--start\nif (REPEXISTS(\"USER_REP\") == 0) then\n  CREATEREP(\"USER_REP\")\n  print(\"Repository Created.\")\nendif\nend-->"
    },
    {
        "prompt": "If class 'PREFS' does not exist in 'USER_REP', create it as a STRING class.",
        "script": "<--start\n# Assumes USER_REP exists\nif (CLASSEXISTS(\"USER_REP\", \"PREFS\") == 0) then\n  CREATECLASS(\"USER_REP\", \"PREFS\", 5)\n  print(\"Class Created.\")\nendif\nend-->"
    },
    {
        "prompt": "If field 'theme' does not exist in USER_REP.PREFS, create and set it to 'dark'.",
        "script": "<--start\nif (FIELDEXISTS(USER_REP.PREFS.theme) == 0) then\n  USER_REP.PREFS.theme = \"dark\"\n  print(USER_REP.PREFS.theme)\nendif\nend-->"
    },
    {
        "prompt": "Assign an integer value 2025 to the repository field CONFIG.SYSTEM.year.",
        "script": "<--start\n# Assumes CONFIG.SYSTEM is an INTEGER class\nCONFIG.SYSTEM.year = 2025\nprint(CONFIG.SYSTEM.year)\nend-->"
    },
    {
        "prompt": "Read the value of the 'onlineOrBatch' field from the 'BANCS.STDIN' repository into a variable.",
        "script": "<--start\nsv_mode = BANCS.STDIN.onlineOrBatch\nprint(sv_mode)\nend-->"
    },
    {
        "prompt": "Write a nested if statement. If sv_a > 10, then check if sv_b > 20.",
        "script": "<--start\nsv_a = 11\nsv_b = 21\nif (sv_a > 10) then\n  print(\"sv_a is greater than 10\")\n  if (sv_b > 20) then\n    print(\"sv_b is also greater than 20\")\n  endif\nendif\nend-->"
    },
    {
        "prompt": "Use GOSUB inside an if condition to call a subroutine.",
        "script": "<--start\nsv_a = 1\nif (sv_a == 1) THEN\n  GOSUB sub1\nENDIF\nEXITSCRIPT\nsub1:\n  print(\"In subroutine 1\")\n  RETURN\nend-->"
    },
    {
        "prompt": "Dynamically change the type of sv_a from an integer to a string.",
        "script": "<--start\nsv_a = 12345\nprint(\"sv_a is an integer now.\")\nsv_a = \"Hello\"\nprint(\"sv_a is a string now.\")\nend-->"
    },
    {
        "prompt": "Call a user hook named 'FETCH_CUST_DATA' and check the return value.",
        "script": "<--start\nsv_ret = URHK_FETCH_CUST_DATA(\"cif_id_123\")\nif (sv_ret == 0) then\n  print(\"Fetch successful\")\nelse\n  print(\"Fetch failed\")\nendif\nend-->"
    },
    {
        "prompt": "Calculate 15 plus 30 minus 10.",
        "script": "<--start\nsv_result = 15 + 30 - 10\nprint(sv_result)\nend-->"
    },
    {
        "prompt": "Create a script to find the difference between 99 and 44.",
        "script": "<--start\nsv_val1 = 99\nsv_val2 = 44\nsv_result = sv_val1 - sv_val2\nprint(sv_result)\nend-->"
    },
    {
        "prompt": "Calculate 3 multiplied by 4 plus 5.",
        "script": "<--start\nsv_a = 3\nsv_b = 4\nsv_c = 5\nsv_result = sv_a * sv_b + sv_c\nprint(sv_result)\nend-->"
    },
    {
        "prompt": "Check if a string 'test' is equal to 'test'.",
        "script": "<--start\nif (\"test\" == \"test\") then\n  print(\"Strings are equal\")\nendif\nend-->"
    },
    {
        "prompt": "Loop from 10 down to 1 and print each number.",
        "script": "<--start\nlv_i = 10\nwhile (lv_i > 0)\ndo\n  print(lv_i)\n  lv_i = lv_i - 1\nendwhile\nend-->"
    },
    {
        "prompt": "Check if BANCS.INPUT.value is empty. If it is, set success to 'F'.",
        "script": "<--start\nif (BANCS.INPUT.value == \"\") then\n  BANCS.OUTPUT.successOrFailure = \"F\"\nelse\n  BANCS.OUTPUT.successOrFailure = \"S\"\nendif\nend-->"
    },
    {
        "prompt": "Replace the middle 2 characters of '123456' with 'XX' using SET$.",
        "script": "<--start\nsv_a = \"123456\"\nsv_b = SET$(sv_a, 2, 2, \"XX\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Format the number 12.345 to two decimal places.",
        "script": "<--start\nsv_a = 12.345\nsv_b = FORMAT$(sv_a, \"%.2f\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Create a temporary repository 'LOGS', a string class 'MESSAGES', and add a field 'error1' with value 'File not found'.",
        "script": "<--start\nCREATEREP(\"LOGS\")\nCREATECLASS(\"LOGS\", \"MESSAGES\", 5)\nLOGS.MESSAGES.error1 = \"File not found\"\nprint(LOGS.MESSAGES.error1)\nend-->"
    },
    {
        "prompt": "In a loop, if the counter is 5, use GOTO to jump to the end.",
        "script": "<--start\nlv_i = 0\nwhile (lv_i < 10)\ndo\n  if (lv_i == 5) then\n    GOTO end_loop\n  endif\n  print(lv_i)\n  lv_i = lv_i + 1\nendwhile\nend_loop:\nprint(\"Loop finished.\")\nend-->"
    },
    {
        "prompt": "What is 200 minus 75?",
        "script": "<--start\nsv_a = 200\nsv_b = 75\nsv_c = sv_a - sv_b\nprint(sv_c)\nend-->"
    },
    {
        "prompt": "How do you represent 1500 multiplied by 2?",
        "script": "<--start\nsv_a = 1500\nsv_b = 2\nsv_c = sv_a * sv_b\nprint(sv_c)\nend-->"
    },
    {
        "prompt": "Find the sum of 1, 2, 3, 4, and 5 using a loop.",
        "script": "<--start\nlv_sum = 0\nlv_i = 1\nwhile (lv_i <= 5)\ndo\n  lv_sum = lv_sum + lv_i\n  lv_i = lv_i + 1\nendwhile\nprint(lv_sum)\nend-->"
    },
    {
        "prompt": "If a string sv_a is longer than 10 characters, print 'Too long'.",
        "script": "<--start\nsv_a = \"This is a very long string\"\nif (STRLEN(sv_a) > 10) then\n  print(\"Too long\")\nendif\nend-->"
    },
    {
        "prompt": "Read the home currency code into a variable.",
        "script": "<--start\nsv_home_ccy = BANCS.STDIN.homeCrncyCode\nprint(sv_home_ccy)\nend-->"
    },
    {
        "prompt": "Check if the current menu option is 'HACLI'.",
        "script": "<--start\nif (BANCS.STDIN.menuOption == \"HACLI\") then\n  print(\"Customer Inquiry Menu\")\nendif\nend-->"
    },
    {
        "prompt": "Add a string to the HTML output buffer.",
        "script": "<--start\nAddToHTML(\"<h1>Welcome User</h1>\")\nend-->"
    },
    {
        "prompt": "Execute an external program 'validate.exe' with argument 'data.xml'.",
        "script": "<--start\nsv_ret = UREX(\"validate.exe\", \"returndata.tmp\", \"data.xml\")\nprint(sv_ret)\nend-->"
    },
    {
        "prompt": "If lv_a is not 1 and not 2, print 'Other'.",
        "script": "<--start\nlv_a = 3\nif ((lv_a != 1) AND (lv_a != 2)) then\n  print(\"Other\")\nendif\nend-->"
    },
    {
        "prompt": "Combine 'Hello' and 123 into a single string.",
        "script": "<--start\nsv_a = \"Hello\"\nsv_b = 123\nsv_c = sv_a + sv_b\nprint(sv_c)\nend-->"
    },
    {
        "prompt": "Create a float class 'RATES' and add a field 'tax_rate'.",
        "script": "<--start\n# 3 is the type for FLOAT\nCREATEREP(\"CONFIG\")\nCREATECLASS(\"CONFIG\", \"RATES\", 3)\nCONFIG.RATES.tax_rate = 0.15\nprint(CONFIG.RATES.tax_rate)\nend-->"
    },
    {
        "prompt": "Write a script that does nothing but has a start and end tag.",
        "script": "<--start\n# This script is empty.\nend-->"
    },
    {
        "prompt": "Set a variable to the result of 100/5.",
        "script": "<--start\nsv_a = 100/5\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "In a loop from 1 to 10, print 'Five' when the counter hits 5.",
        "script": "<--start\nlv_i = 1\nwhile (lv_i <= 10)\ndo\n  if (lv_i == 5) then\n    print(\"Five\")\n  else\n    print(lv_i)\n  endif\n  lv_i = lv_i + 1\nendwhile\nend-->"
    },
    {
        "prompt": "What is the result of 10 minus 20?",
        "script": "<--start\nsv_a = 10\nsv_b = 20\nsv_c = sv_a - sv_b\nprint(sv_c)\nend-->"
    },
    {
        "prompt": "Take the string 'abcde', get the middle character 'c'.",
        "script": "<--start\nsv_a = \"abcde\"\nsv_b = Mid$(sv_a, 2, 1)\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Check if BANCS.STDIN.WFflg is equal to 'Y'.",
        "script": "<--start\n# Checks if script is a workflow script\nif (BANCS.STDIN.WFflg == \"Y\") then\n  print(\"This is a workflow script.\")\nendif\nend-->"
    },
    {
        "prompt": "Use PUTREPFIELD to set the value of a field named 'MY_REP.MY_CLASS.MY_FIELD'.",
        "script": "<--start\nCREATEREP(\"MY_REP\")\nCREATECLASS(\"MY_REP\", \"MY_CLASS\", 5)\nsv_a = \"MY_REP.MY_CLASS.MY_FIELD\"\nsv_b = \"My Value\"\nPUTREPFIELD(sv_a, sv_b)\nend-->"
    },
    {
        "prompt": "Use GETREPFIELD to retrieve the value of 'MY_REP.MY_CLASS.MY_FIELD'.",
        "script": "<--start\n# Assumes the field was set previously\nsv_a = \"MY_REP.MY_CLASS.MY_FIELD\"\nsv_b = GETREPFIELD(sv_a)\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Write a script to check if 25 is greater than 15.",
        "script": "<--start\nif (25 > 15) then\n  print(\"Yes, 25 is greater.\")\nendif\nend-->"
    },
    {
        "prompt": "Take the number 50 and subtract 5.",
        "script": "<--start\nsv_a = 50 - 5\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Print the current system date from the BANCS.STDIN repository.",
        "script": "<--start\nsv_date = BANCS.STDIN.sysDate\nprint(sv_date)\nend-->"
    },
    {
        "prompt": "Format an account number by taking the last 4 digits of '12345678' and prefixing with 'ACC-'.",
        "script": "<--start\nsv_full_num = \"12345678\"\nsv_last_four = Right$(sv_full_num, 4)\nsv_formatted = \"ACC-\" + sv_last_four\nprint(sv_formatted)\nend-->"
    },
    {
        "prompt": "If input value in BANCS.INPUT.amount is less than 1000 and the transaction type is 'CASH', set a flag.",
        "script": "<--start\nlv_flag = 0\nif ((CINT(BANCS.INPUT.amount) < 1000) AND (BANCS.INPUT.tranType == \"CASH\")) then\n  lv_flag = 1\nendif\nprint(lv_flag)\nend-->"
    },
    {
        "prompt": "Create a character class and store the character 'A'.",
        "script": "<--start\n# 4 is the type for CHAR\nCREATEREP(\"TEMP\")\nCREATECLASS(\"TEMP\", \"CHARS\", 4)\nTEMP.CHARS.myChar = 'A'\nprint(TEMP.CHARS.myChar)\nend-->"
    },
    {
        "prompt": "Use a subroutine to add two numbers.",
        "script": "<--start\nsv_x = 10\nsv_y = 20\nGOSUB add_routine\nprint(sv_z)\nEXITSCRIPT\nadd_routine:\n  sv_z = sv_x + sv_y\n  RETURN\nend-->"
    },
    {
        "prompt": "If sv_a is 1, print 'One'. If it's 2, print 'Two'. Otherwise, print 'Other'.",
        "script": "<--start\nsv_a = 2\nif (sv_a == 1) then\n  print(\"One\")\nelse\n  if (sv_a == 2) then\n    print(\"Two\")\n  else\n    print(\"Other\")\n  endif\nendif\nend-->"
    },
    {
        "prompt": "Find the result of (10 + 5) * 2.",
        "script": "<--start\nsv_result = (10 + 5) * 2\nprint(sv_result)\nend-->"
    },
    {
        "prompt": "Print the description of the current service outlet (SOL).",
        "script": "<--start\nsv_sol_desc = BANCS.STDIN.mySolDesc\nprint(sv_sol_desc)\nend-->"
    },
    {
        "prompt": "Demonstrate a simple GOTO loop that prints 3 times.",
        "script": "<--start\nsv_a = 3\nloop_start:\nif (sv_a == 0) then\n  GOTO loop_end\nendif\nprint(sv_a)\nsv_a = sv_a - 1\nGOTO loop_start\nloop_end:\nend-->"
    },
    {
        "prompt": "If sv_a is not null, process it. (Check for empty string)",
        "script": "<--start\nsv_a = \"some data\"\nif (sv_a != \"\") then\n  print(\"Processing data...\")\nendif\nend-->"
    },
    {
        "prompt": "Pad the number 123 with leading zeros to make it 5 digits long.",
        "script": "<--start\nsv_a = 123\nsv_b = LPAD(sv_a, 5, \"0\")\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Convert a char 'c' to a string.",
        "script": "<--start\nsv_a = 'c'\nsv_b = GETSTRING(sv_a)\nprint(sv_b)\nend-->"
    },
    {
        "prompt": "Create a script that calculates 1000 minus 1.",
        "script": "<--start\nsv_a = 1000 - 1\nprint(sv_a)\nend-->"
    },
    {
        "prompt": "Assign 25 to sv_a. Check if sv_a is less than 30 OR greater than 20.",
        "script": "<--start\nsv_a = 25\nif ((sv_a < 30) OR (sv_a > 20)) then\n  print(\"Condition met.\")\nendif\nend-->"
    },
    {
        "prompt": "What is 50 divided by 2, plus 10?",
        "script": "<--start\nsv_result = 50 / 2 + 10\nprint(sv_result)\nend-->"
    },
    {
        "prompt": "Check if the length of 'Hello' is 5.",
        "script": "<--start\nif (STRLEN(\"Hello\") == 5) then\n  print(\"Length is 5.\")\nendif\nend-->"
    },
    {
        "prompt": "Take the uppercase of 'test' and compare it to 'TEST'.",
        "script": "<--start\nsv_a = TOUPPER(\"test\")\nif (sv_a == \"TEST\") then\n  print(\"Match\")\nendif\nend-->"
    },
    {
        "prompt": "Show me a script that does a subtraction: 42 minus 12.",
        "script": "<--start\nsv_a = 42\nsv_b = 12\nsv_c = sv_a - sv_b\nprint(sv_c)\nend-->"
    },
    {
        "prompt": "Calculate 33 - 11 and print the value.",
        "script": "<--start\nlv_a = 33\nlv_b = 11\nlv_c = lv_a - lv_b\nprint(lv_c)\nend-->"
    },
    {
        "prompt": "Give me the result of 77 subtracted by 7.",
        "script": "<--start\nsv_result = 77 - 7\nprint(sv_result)\nend-->"
    }
]